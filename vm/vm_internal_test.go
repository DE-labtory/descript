/*
 * Copyright 2018-2019 De-labtory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vm

import (
	"bytes"
	"testing"
)

func TestCallFuncArguments(t *testing.T) {
	tests := []struct {
		n        int
		args     []byte
		expected []byte
	}{
		{
			n: 0,
			args: []byte{
				0x00, // 0x00 pointer
				0x00, // 0x01 pointer
				0x00, // 0x02 pointer
				0x00, // 0x03 pointer
				0x00, // 0x04 pointer
				0x00, // 0x05 pointer
				0x00, // 0x06 pointer
				0x08, // 0x07 pointer

				0x00, // 0x08 size
				0x00, // 0x09 size
				0x00, // 0x0a size
				0x00, // 0x0b size
				0x00, // 0x0c size
				0x00, // 0x0d size
				0x00, // 0x0e size
				0x08, // 0x0f size

				0x00, // 0x10 value
				0x00, // 0x11 value
				0x00, // 0x12 value
				0x00, // 0x13 value
				0x00, // 0x14 value
				0x00, // 0x15 value
				0x00, // 0x16 value
				0x0a, // 0x17 value
			},
			expected: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a},
		},
		{
			n: 1,
			args: []byte{
				0x00, // 0x00 pointer
				0x00, // 0x01 pointer
				0x00, // 0x02 pointer
				0x00, // 0x03 pointer
				0x00, // 0x04 pointer
				0x00, // 0x05 pointer
				0x00, // 0x06 pointer
				0x10, // 0x07 pointer

				0x00, // 0x08 pointer
				0x00, // 0x09 pointer
				0x00, // 0x0a pointer
				0x00, // 0x0b pointer
				0x00, // 0x0c pointer
				0x00, // 0x0d pointer
				0x00, // 0x0e pointer
				0x20, // 0x0f pointer

				0x00, // 0x10 size
				0x00, // 0x11 size
				0x00, // 0x12 size
				0x00, // 0x13 size
				0x00, // 0x14 size
				0x00, // 0x15 size
				0x00, // 0x16 size
				0x08, // 0x17 size

				0x00, // 0x18 value
				0x00, // 0x19 value
				0x00, // 0x1a value
				0x00, // 0x1b value
				0x00, // 0x1c value
				0x00, // 0x1d value
				0x00, // 0x1e value
				0x0a, // 0x1f value

				0x00, // 0x20 size
				0x00, // 0x21 size
				0x00, // 0x22 size
				0x00, // 0x23 size
				0x00, // 0x24 size
				0x00, // 0x25 size
				0x00, // 0x26 size
				0x08, // 0x27 size

				0x00, // 0x28 value
				0x00, // 0x29 value
				0x00, // 0x2a value
				0x00, // 0x2b value
				0x00, // 0x2c value
				0x00, // 0x2d value
				0x00, // 0x2e value
				0x0b, // 0x2f value
			},
			expected: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b},
		},
		{
			n: 2,
			args: []byte{
				0x00, // 0x00 pointer
				0x00, // 0x01 pointer
				0x00, // 0x02 pointer
				0x00, // 0x03 pointer
				0x00, // 0x04 pointer
				0x00, // 0x05 pointer
				0x00, // 0x06 pointer
				0x18, // 0x07 pointer

				0x00, // 0x08 pointer
				0x00, // 0x09 pointer
				0x00, // 0x0a pointer
				0x00, // 0x0b pointer
				0x00, // 0x0c pointer
				0x00, // 0x0d pointer
				0x00, // 0x0e pointer
				0x28, // 0x0f pointer

				0x00, // 0x10 pointer
				0x00, // 0x11 pointer
				0x00, // 0x12 pointer
				0x00, // 0x13 pointer
				0x00, // 0x14 pointer
				0x00, // 0x15 pointer
				0x00, // 0x16 pointer
				0x38, // 0x17 pointer

				0x00, // 0x18 size
				0x00, // 0x19 size
				0x00, // 0x1a size
				0x00, // 0x1b size
				0x00, // 0x1c size
				0x00, // 0x1d size
				0x00, // 0x1e size
				0x08, // 0x1f size

				0x00, // 0x20 value
				0x00, // 0x21 value
				0x00, // 0x22 value
				0x00, // 0x23 value
				0x00, // 0x24 value
				0x00, // 0x25 value
				0x00, // 0x26 value
				0x0a, // 0x27 value

				0x00, // 0x28 size
				0x00, // 0x29 size
				0x00, // 0x2a size
				0x00, // 0x2b size
				0x00, // 0x2c size
				0x00, // 0x2d size
				0x00, // 0x2e size
				0x08, // 0x2f size

				0x00, // 0x30 value
				0x00, // 0x31 value
				0x00, // 0x32 value
				0x00, // 0x33 value
				0x00, // 0x34 value
				0x00, // 0x35 value
				0x00, // 0x36 value
				0x0b, // 0x37 value

				0x00, // 0x38 size
				0x00, // 0x39 size
				0x00, // 0x3a size
				0x00, // 0x3b size
				0x00, // 0x3c size
				0x00, // 0x3d size
				0x00, // 0x3e size
				0x08, // 0x3f size

				0x00, // 0x40 value
				0x00, // 0x41 value
				0x00, // 0x42 value
				0x00, // 0x43 value
				0x00, // 0x44 value
				0x00, // 0x45 value
				0x00, // 0x46 value
				0x0c, // 0x47 value
			},
			expected: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
		},
		// test when size is higher than 1
		{
			n: 0,
			args: []byte{
				0x00, // 0x00 pointer
				0x00, // 0x01 pointer
				0x00, // 0x02 pointer
				0x00, // 0x03 pointer
				0x00, // 0x04 pointer
				0x00, // 0x05 pointer
				0x00, // 0x06 pointer
				0x08, // 0x07 pointer

				0x00, // 0x08 size
				0x00, // 0x09 size
				0x00, // 0x0a size
				0x00, // 0x0b size
				0x00, // 0x0c size
				0x00, // 0x0d size
				0x00, // 0x0e size
				0x08, // 0x0f size

				0x00, // 0x10 value
				0x00, // 0x11 value
				0x00, // 0x12 value
				0x00, // 0x13 value
				0x00, // 0x14 value
				0x00, // 0x15 value
				0x0a, // 0x16 value
				0x0b, // 0x17 value
			},
			expected: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b},
		},
		{
			n: 1,
			args: []byte{
				0x00, // 0x00 pointer
				0x00, // 0x01 pointer
				0x00, // 0x02 pointer
				0x00, // 0x03 pointer
				0x00, // 0x04 pointer
				0x00, // 0x05 pointer
				0x00, // 0x06 pointer
				0x10, // 0x07 pointer

				0x00, // 0x08 pointer
				0x00, // 0x09 pointer
				0x00, // 0x0a pointer
				0x00, // 0x0b pointer
				0x00, // 0x0c pointer
				0x00, // 0x0d pointer
				0x00, // 0x0e pointer
				0x20, // 0x0f pointer

				0x00, // 0x10 size
				0x00, // 0x11 size
				0x00, // 0x12 size
				0x00, // 0x13 size
				0x00, // 0x14 size
				0x00, // 0x15 size
				0x00, // 0x16 size
				0x08, // 0x17 size

				0x00, // 0x18 value
				0x00, // 0x19 value
				0x00, // 0x1a value
				0x00, // 0x1b value
				0x00, // 0x1c value
				0x00, // 0x1d value
				0x0a, // 0x1e value
				0x0b, // 0x1f value

				0x00, // 0x20 size
				0x00, // 0x21 size
				0x00, // 0x22 size
				0x00, // 0x23 size
				0x00, // 0x24 size
				0x00, // 0x25 size
				0x00, // 0x26 size
				0x08, // 0x27 size

				0x00, // 0x28 value
				0x00, // 0x29 value
				0x00, // 0x2a value
				0x00, // 0x2b value
				0x00, // 0x2c value
				0x01, // 0x2d value
				0x02, // 0x2e value
				0x03, // 0x3f value
			},
			expected: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03},
		},
	}

	for i, tt := range tests {
		cf := CallFunc{Args: tt.args}
		result := cf.arguments(tt.n)

		if !bytes.Equal(result, tt.expected) {
			t.Errorf("test[%d] - Wrong arguments returned expected=%v, got=%v",
				i, tt.expected, result)
		}
	}
}

func TestCallFuncArgumentsPanic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Test case did not panic")
		}
	}()

	CallFunc{}.arguments(-1)
}
